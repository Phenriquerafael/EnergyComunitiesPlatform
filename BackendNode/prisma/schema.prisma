generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]   @relation("RoleUsers") // relação com User
}

model User {
  id          String  @id @default(uuid())
  firstName   String
  lastName    String
  email       String  @unique         
  phoneNumber String
  password    String?
  isActive    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId           String?
  role             Role?             @relation("RoleUsers", fields: [roleId], references: [id])
  Prosumer         Prosumer?
  CommunityManager CommunityManager?
}

model Profile {
  id                     String   @id @default(uuid())
  prosumerId             String
  prosumer               Prosumer @relation(fields: [prosumerId], references: [id], onDelete: Cascade)
  date                   String
  intervalOfTime         Int
  numberOfIntervals      Int
  stateOfCharge          Float 
  batteryDischarge       Float 
  batteryCharge          Float 
  photovoltaicEnergyLoad Float 
  boughtEnergyAmount     Float 
  boughtEnergyPrice      Float ?
  soldEnergyAmount       Float 
  soldEnergyPrice        Float ?
  peerOutputEnergyLoad   Float 
  peerOutPrice           Float ?
  peerInputEnergyLoad    Float 
  peerInPrice            Float ?
  profileLoad            Float ?
  simulationId         String  @default("")
  simulation           Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Simulation {
  id          String             @id @default(uuid())
  startDate   String
  endDate     String
  description String?
  communityId String
  community   Community          @relation(fields: [communityId], references: [id], onDelete: Cascade)

  activeAttributes ActiveAttributes[]

  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  profiles    Profile[]
}

model ActiveAttributes {
  simulationId          String
  prosumerId            String
  profileLoad           Boolean @default(false)
  stateOfCharge         Boolean @default(false)
  photovoltaicEnergyLoad Boolean @default(false)

  simulation            Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)

  @@id([simulationId, prosumerId]) // chave primária composta
}

model Battery {
  id                 String    @id @default(uuid())
  name               String?
  description        String?
  efficiency         Float 
  maxCapacity        Float 
  initialCapacity    Float 
  maxChargeDischarge Float 
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  Prosumer           Prosumer[]
}

model Prosumer {
  id          String     @id @default(uuid())
  batteryId   String     
  battery     Battery    @relation(fields: [batteryId], references: [id])
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id])
  communityId String?    
  community   Community? @relation(fields: [communityId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profiles  Profile[] // One-to-many relation with Profile
}

model Community {
  id               String            @id @default(uuid())
  name             String            @unique
  description      String?
  country          String?
  countryCode      String?
  prosumers        Prosumer[] // One-to-many relation with Prosumer
  communityManager CommunityManager?
  simulations      Simulation[] // One-to-many relation with Simulation

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model CommunityManager {
  id          String    @id @default(uuid())
  communityId String    @unique
  community   Community @relation(fields: [communityId], references: [id])
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
