generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]   @relation("RoleUsers") // relação com User
}

model User {
  id          String  @id @default(uuid())
  firstName   String
  lastName    String
  email       String  @unique
  phoneNumber String
  password    String?
  isActive    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId           String?
  role             Role?             @relation("RoleUsers", fields: [roleId], references: [id])
  Prosumer         Prosumer?
  CommunityManager CommunityManager?
}

model Profile {
  id                     String   @id @default(uuid())
  prosumerId             String
  prosumer               Prosumer @relation(fields: [prosumerId], references: [id], onDelete: Cascade)
  date                   String
  intervalOfTime         String
  numberOfIntervals      Int
  stateOfCharge          String
  batteryDischarge       String
  batteryCharge          String
  photovoltaicEnergyLoad String
  boughtEnergyAmount     String
  boughtEnergyPrice      String?
  soldEnergyAmount       String
  soldEnergyPrice        String?
  peerOutputEnergyLoad   String
  peerOutPrice           String?
  peerInputEnergyLoad    String
  peerInPrice            String?
  profileLoad            String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Battery {
  id                 String    @id @default(uuid())
  name               String?
  description        String?
  efficiency         String
  maxCapacity        String
  initialCapacity    String
  maxChargeDischarge String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  Prosumer           Prosumer?
}

model Prosumer {
  id          String     @id @default(uuid())
  batteryId   String     @unique
  battery     Battery    @relation(fields: [batteryId], references: [id])
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id])
  communityId String?    @unique
  community   Community? @relation(fields: [communityId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profiles  Profile[] // One-to-many relation with Profile
}

model Community {
  id               String            @id @default(uuid())
  name             String            @unique
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  prosumers        Prosumer[] // One-to-many relation with Prosumer
  CommunityManager CommunityManager?
}

model CommunityManager {
  id          String    @id @default(uuid())
  communityId String    @unique
  community   Community @relation(fields: [communityId], references: [id])
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
