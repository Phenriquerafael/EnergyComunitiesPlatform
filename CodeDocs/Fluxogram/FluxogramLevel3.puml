@startuml
skinparam monochrome true
skinparam backgroundColor white

' Start of the process for one day '
start
:Load current day data;
note right: Maximum solar panel production,\nUser usage,\nPurchase price,\nSelling price,\nBattery parameters

' Loop for each time interval (15 minutes) '
:For each 15-minute interval in the day (total of 96);

' Prosumer Inputs '
:Get UserUsage and MaxSolarProduction;
note right: UserUsage = energy required\nMaxSolarProduction = energy generated by the solar panel

' Decision on solar energy usage '
:Split solar energy into EnergyForUsage and EnergyForBattery;
note right: EnergyForUsage + EnergyForBattery = MaxSolarProduction

' Battery Management '
if (EnergyForBattery > 0?) then (Yes)
  :Calculate BatteryCharge;
  note right: BatteryCharge = EnergyForBattery\nLimited by the battery's maximum capacity
  :ChargingBattery = True;
  :DischargingBattery = False;
else (No)
  if (UserUsage > EnergyForUsage?) then (Yes)
    :Calculate BatteryDischarge;
    note right: Limited by the battery's maximum capacity
    :DischargingBattery = True;
    :ChargingBattery = False;
  else (No)
    :BatteryCharge = 0;
    :BatteryDischarge = 0;
    :ChargingBattery = False;
    :DischargingBattery = False;
  endif
endif

' Update battery charge level '
:Calculate ChargeLevel;
note right: ChargeLevel = Previous level + 15min * (ChargeEfficiency * BatteryCharge - BatteryDischarge / DischargeEfficiency)\nMinimum defined by battery parameters

' User Energy Balance '
:Calculate required or excess energy;
note right: UserUsage = EnergyForUsage + BatteryDischarge + EnergyPurchased - EnergySold + EnergyReceived - EnergySent

' Decision on community or grid exchange '
if (UserUsage > EnergyForUsage + BatteryDischarge?) then (Yes)
  if (Community has spare energy?) then (Yes)
    :Receive EnergyReceived from community;
    note right: EnergyReceived = energy from another user
  else (No)
    :Buy EnergyPurchased from the grid;
    note right: EnergyPurchased limited to 12.5 kW\nCost = PurchasePrice * EnergyPurchased
  endif
else (No)
  if (MaxSolarProduction > UserUsage + EnergyForBattery?) then (Yes)
    if (Community needs energy?) then (Yes)
      :Send EnergySent to community;
      note right: EnergySent limited by solar excess
    else (No)
      :Sell EnergySold to the grid;
      note right: EnergySold limited to 10.5 kW\nRevenue = SellingPrice * EnergySold
    endif
  else (No)
    :EnergyPurchased = 0;
    :EnergySold = 0;
    :EnergyReceived = 0;
    :EnergySent = 0;
  endif
endif

' Store results for the interval '
:Store EnergyPurchased, EnergySold, ChargeLevel, BatteryCharge, BatteryDischarge, EnergyForUsage, EnergyForBattery, EnergyReceived, EnergySent;

' End of time loop '
:Next interval;
detach

' End of day '
:Save final ChargeLevel for the day;
note right: FinalChargeLevel = ChargeLevel at the last interval

' Calculate daily cost/revenue '
:Calculate total daily cost;
note right: Total Cost = Sum(PurchasePrice * EnergyPurchased - SellingPrice * EnergySold) for all intervals

stop

@enduml